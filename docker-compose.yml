version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx-lb
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /home/ubuntu/nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: ${MYSQL_CONTAINER_NAME}
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      LANG: C.UTF-8
    ports:
      - "${MYSQL_PORT}:${MYSQL_CONTAINER_PORT}"
    networks:
      - app-network
    volumes:
      - /home/ubuntu/docker-mysql/picktime_data:/var/lib/mysql

  mongo:
    image: mongo:6.0
    container_name: ${MONGO_CONTAINER_NAME}
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${MONGO_PORT}:${MONGO_CONTAINER_PORT}"
    networks:
      - app-network
    volumes:
      - /home/ubuntu/docker-mongodb/picktime_data:/data/db

  spring-app:
    build:
      context: ./BACKEND/Spring
      dockerfile: Dockerfile
    image: ${SPRING_IMAGE_NAME}:latest
    container_name: ${SPRING_CONTAINER_NAME}
    restart: always
    ports:
      - "${SPRING_PORT}:${SPRING_CONTAINER_PORT}"
    environment:
      # MySQL
      MYSQL_CONTAINER_NAME: ${MYSQL_CONTAINER_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PORT: ${MYSQL_CONTAINER_PORT}

      # MongoDB
      MONGO_CONTAINER_NAME: ${MONGO_CONTAINER_NAME}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}
      MONGO_PORT: ${MONGO_CONTAINER_PORT}

      # JWT
      JWT_AUTH_KEY: ${JWT_AUTH_KEY}

      # Mail
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}

    networks:
      - app-network

  fastapi-app:
    build:
      context: ./BACKEND/FastAPI
      dockerfile: Dockerfile
    image: ${FASTAPI_IMAGE_NAME}:latest
    container_name: ${FASTAPI_CONTAINER_NAME}
    ports:
      - "${FASTAPI_PORT}:${FASTAPI_CONTAINER_PORT}"
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
