package com.example.picktimeapp.ui.practice

// ÏòÅÏÉÅ + ÏùåÏÑ±ÏúºÎ°ú ÏΩîÎìú ÌåêÎ≥ÑÌïòÎäî ÌéòÏù¥ÏßÄ

import android.media.MediaPlayer
import android.net.Uri
import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.example.picktimeapp.R
import com.example.picktimeapp.ui.camera.CameraPreview
import com.example.picktimeapp.ui.components.PauseDialogCustom
import com.example.picktimeapp.ui.components.PracticeTopBar
import com.example.picktimeapp.ui.nav.Routes
import com.example.picktimeapp.ui.theme.*
import com.example.picktimeapp.util.ChordCheckViewModel
import com.example.picktimeapp.util.ChordImageMap
import kotlinx.coroutines.delay

@Composable
fun PracticeChordCheckScreen(
    navController: NavController,
    stepId : Int,
    viewModel: PracticeStepViewModel = hiltViewModel(),
    chordCheckViewModel: ChordCheckViewModel = hiltViewModel()
) {

    val stepData = viewModel.stepData.value
    val chords = stepData?.chords.orEmpty()

    val chordName = if (chords.isNotEmpty()) chords.first().chordName else "Î°úÎî© Ï§ë..."


    val showPauseDialog = remember { mutableStateOf(false) }                                // ÏùºÏãúÏ†ïÏßÄ Î™®Îã¨
    val feedbackText = remember { mutableStateOf("Î°úÎî© Ï§ë...") }     // ÌîºÎìúÎ∞± ÏÉÅÌÉúÍ¥ÄÎ¶¨
    val isCorrect = remember { mutableStateOf(false) }
    val detectionDone = remember { mutableStateOf(false) }


    // ÏÜåÎ¶¨ ÏÑ§Ï†ï
    val chordSoundUri = if (chords.isNotEmpty()) chords.first().chordSoundUri else ""
    val context = LocalContext.current
    val mediaPlayer = remember { MediaPlayer() }

    // ÎßûÌûå ÎÖ∏Ìä∏ Í∞úÏàò Í≥ÑÏÇ∞
    var correctCount by remember { mutableStateOf(0) }


    // ‚úÖ BE API Ìò∏Ï∂ú
    // stepIdÍ∞Ä Î∞îÎÄî ÎïåÎßàÎã§ ÏÑúÎ≤ÑÏóêÏÑú step Îç∞Ïù¥ÌÑ∞(chordName, chordSoundUri Îì±)Î•º Î∂àÎü¨Ïò¥
    LaunchedEffect(stepId) {
        viewModel.fetchPracticeStep(stepId)
    }


    // ‚úÖ AI API Ìò∏Ï∂ú Ï†ïÎãµÏù¥Î©¥ ÏûêÎèô Ïù¥Îèô
    LaunchedEffect(isCorrect.value) {
        if (isCorrect.value) {
            delay(2000)
            navController.navigate(Routes.PRACTICE_CHORDCHANGE)
        }
    }

    // ÌîºÎìúÎ∞±ÏÉÅÏûêÏö© ÎπÑÎèôÍ∏∞Ï≤òÎ¶¨
    LaunchedEffect(stepData?.chords) {
        val name = stepData?.chords?.firstOrNull()?.chordName
        if (name != null) {
            feedbackText.value = "$name ÏΩîÎìúÎ•º Ïó∞Ï£ºÌï¥Î≥ºÍπåÏöî?"
        }
    }

    BoxWithConstraints(modifier = Modifier.fillMaxSize()) {
        val screenWidth = maxWidth
        val screenHeight = maxHeight
        val density = LocalDensity.current




        Scaffold(
            topBar = {
                PracticeTopBar(
                    titleText = "ÏΩîÎìú Î∞∞Ïö∞Í∏∞",
                    onPauseClick = { showPauseDialog.value = true }
                )}
        ) { innerPadding ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                // ÏÉÅÎã® - ÌîºÎìúÎ∞± Î∞ïÏä§
                Box(
                    modifier = Modifier
                        .align(Alignment.CenterHorizontally)
                        .fillMaxWidth(0.85f)
                        .height(screenHeight * 0.1f)
                        .padding(top = screenHeight * 0.01f)
                        .background(Brown20, shape = RoundedCornerShape(screenHeight * 0.035f)),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = feedbackText.value,
                        style = MaterialTheme.typography.bodySmall,
                        color = Gray90,
                        fontWeight = FontWeight.Normal,
                        fontFamily = TitleFont,
                        fontSize = (screenWidth * 0.020f).value.sp
                    )
                }

                // üéØ ÏΩîÎìúÎ™Ö + Ïä§ÌîºÏª§ + ÏΩîÎìú Ïù¥ÎØ∏ÏßÄ (Í∞ÄÏö¥Îç∞ ÏòÅÏó≠)
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f),
                    contentAlignment = Alignment.Center
                ) {
                    Row(
                        verticalAlignment = Alignment.Top,
                        modifier = Modifier.wrapContentSize()
                    ) {
                        // ÏôºÏ™Ω: ÏΩîÎìúÎ™Ö + Ïä§ÌîºÏª§ ÏïÑÏù¥ÏΩò
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Top,
                            modifier = Modifier
                                .padding(end = screenWidth * 0.04f , top=screenHeight * 0.02f)
                                .align(Alignment.Top)
                        ) {
                            Text(
                                text = chordName,
                                fontSize = (screenWidth * 0.04f).value.sp,
                                fontWeight = FontWeight.Bold,
                                fontFamily = TitleFont,
                                color = Gray90,
                                modifier = Modifier.padding(bottom = 12.dp)
                            )

                            IconButton(
                                onClick = {
                                    val chordSoundUri = viewModel.stepData.value?.chords?.firstOrNull()?.chordSoundUri
                                    if (!chordSoundUri.isNullOrBlank()) {
                                        try {
                                            val uri = Uri.parse(chordSoundUri)
                                            mediaPlayer.reset()
                                            mediaPlayer.setDataSource(context, uri) // ‚úÖ context Í∏∞Î∞òÏúºÎ°ú ÏÑ§Ï†ï
                                            mediaPlayer.prepare()
                                            mediaPlayer.start()
                                        } catch (e: Exception) {
                                            Log.e("ChordPress", "ÏÇ¨Ïö¥Îìú Ïû¨ÏÉù Ïã§Ìå®: ${e.message}")
                                        }
                                    } else {
                                        Log.w("ChordPress", "chordSoundUriÍ∞Ä null ÎòêÎäî ÎπÑÏñ¥ ÏûàÏùå")
                                    }
                                },
                                modifier = Modifier.size(56.dp)
                            )
                            {
                                Image(
                                    painter = painterResource(id = R.drawable.speaker),
                                    contentDescription = "ÏΩîÎìú ÏÇ¨Ïö¥Îìú",
                                    modifier = Modifier.fillMaxSize()
                                )
                            }


                        }

                        // Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞
                        val chordImageResId = ChordImageMap.getResId(chordName)

                        // Ïò§Î•∏Ï™Ω: ÏΩîÎìú Ïù¥ÎØ∏ÏßÄ
                        if (chordImageResId != 0) {
                            Image(
                                painter = painterResource(id = chordImageResId),
                                contentDescription = "$chordName ÏΩîÎìú Ïù¥ÎØ∏ÏßÄ",
                                modifier = Modifier
                                    .height(screenHeight * 0.4f),
                                contentScale = ContentScale.Fit
                            )
                        } else {
                            Text(text = "Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå: $chordName")
                        }

                    }
                }



                // ÌïòÎã® - Ïπ¥Î©îÎùº ÌîÑÎ¶¨Î∑∞ + Îã§Ïùå Î≤ÑÌäº
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(end = screenWidth * 0.03f, bottom = screenHeight * 0.03f)
                ) {
                    CameraPreview(
                        chordCheckViewModel = chordCheckViewModel,
                        modifier = Modifier
                            .align(Alignment.BottomCenter)
                            .offset {
                                with(density) {
                                    IntOffset(x = (screenWidth * 0.3f).toPx().toInt(), y = 0)
                                }
                            }
                            .size(
                                width = screenWidth * 0.20f,
                                height = screenHeight * 0.20f
                            )
                            .clip(RoundedCornerShape(12.dp))
                    )

                    IconButton(
                        onClick = { navController.navigate("practicechordchange/$stepId") },
                        modifier = Modifier
                            .align(Alignment.BottomEnd)
                            .padding(bottom = 8.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.ArrowForward,
                            contentDescription = "Îã§ÏùåÏúºÎ°ú",
                            modifier = Modifier.size(screenWidth * 0.2f),
                            tint = Gray90
                        )
                    }
                }

                // ÏùºÏãúÏ†ïÏßÄ Î≤ÑÌäº
                if (showPauseDialog.value) {
                    PauseDialogCustom(
                        screenWidth = screenWidth,
                        onDismiss = { showPauseDialog.value = false },
                        onExit = {
                            showPauseDialog.value = false
                            navController.navigate(Routes.PRACTICE_LIST) {
                                popUpTo(Routes.PRACTICE_LIST) { inclusive = true }

                            }
                        }
                    )
                }

            }
        }
    }
}